// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: protos/vertex.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VertexService_ProcessString_FullMethodName = "/vertex.VertexService/ProcessString"
)

// VertexServiceClient is the client API for VertexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VertexServiceClient interface {
	ProcessString(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*JsonResponse, error)
}

type vertexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVertexServiceClient(cc grpc.ClientConnInterface) VertexServiceClient {
	return &vertexServiceClient{cc}
}

func (c *vertexServiceClient) ProcessString(ctx context.Context, in *StringRequest, opts ...grpc.CallOption) (*JsonResponse, error) {
	out := new(JsonResponse)
	err := c.cc.Invoke(ctx, VertexService_ProcessString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VertexServiceServer is the server API for VertexService service.
// All implementations must embed UnimplementedVertexServiceServer
// for forward compatibility
type VertexServiceServer interface {
	ProcessString(context.Context, *StringRequest) (*JsonResponse, error)
	mustEmbedUnimplementedVertexServiceServer()
}

// UnimplementedVertexServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVertexServiceServer struct {
}

func (UnimplementedVertexServiceServer) ProcessString(context.Context, *StringRequest) (*JsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessString not implemented")
}
func (UnimplementedVertexServiceServer) mustEmbedUnimplementedVertexServiceServer() {}

// UnsafeVertexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VertexServiceServer will
// result in compilation errors.
type UnsafeVertexServiceServer interface {
	mustEmbedUnimplementedVertexServiceServer()
}

func RegisterVertexServiceServer(s grpc.ServiceRegistrar, srv VertexServiceServer) {
	s.RegisterService(&VertexService_ServiceDesc, srv)
}

func _VertexService_ProcessString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VertexServiceServer).ProcessString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VertexService_ProcessString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VertexServiceServer).ProcessString(ctx, req.(*StringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VertexService_ServiceDesc is the grpc.ServiceDesc for VertexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VertexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vertex.VertexService",
	HandlerType: (*VertexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessString",
			Handler:    _VertexService_ProcessString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/vertex.proto",
}
